rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public stats collection
    match /stats/{docId} {
      allow read: if true; // Public read
      // Only allow writes if user has custom claim isAdmin == true
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // Pools collection
    match /pools/{poolId} {

      // Helper function to get pool data
      function getPoolData() {
        return get(/databases/$(database)/documents/pools/$(poolId)).data;
      }

      // ANY authenticated user can create a pool now
      allow create: if request.auth != null
                    && request.resource.data.keys().hasAll([
                      'poolName',
                      'format',
                      'sport',
                      'status',
                      'createdAt',
                      'commissionerId'
                    ])
                    && isValidPoolData(request.resource.data);

      // Public reads for featured pools, or authenticated reads for members/commissioner
      allow read: if resource.data.isFeatured == true
                  || (request.auth != null && isMemberOrCommissioner(resource.data));

      // Update logic remains the same:
      allow update: if request.auth != null
                    && (isCommissioner(resource.data) || canJoinPool(resource.data))
                    && request.resource.data.keys().hasAll([
                      'poolName',
                      'format',
                      'sport',
                      'status',
                      'commissionerId',
                      'memberIds',
                      'isFeatured'
                    ])
                    && isValidPoolData(request.resource.data);

      allow delete: if request.auth != null && isCommissioner(resource.data);

      // Sub-collections (e.g., matchups, participants, offlineUsers, squares)
      match /matchups/{matchupId} {
        allow read: if request.auth != null && isMemberOrCommissioner(getPoolData());
        allow create, update: if request.auth != null
                              && isCommissioner(getPoolData())
                              && isValidMatchupData(request.resource.data);
        allow delete: if request.auth != null && isCommissioner(getPoolData());
      }
      match /participants/{participantId} {
        allow read: if request.auth != null && isMemberOrCommissioner(getPoolData());
        allow write: if request.auth != null && isCommissioner(getPoolData());
      }
      match /offlineUsers/{offlineUserId} {
        allow read: if request.auth != null && isMemberOrCommissioner(getPoolData());
        allow write: if request.auth != null && isCommissioner(getPoolData());
      }
      match /squares/{squareId} {
        allow read: if request.auth != null && isMemberOrCommissioner(getPoolData());
        allow create, update: if request.auth != null
                              && isCommissioner(getPoolData())
                              && isValidSquareData(request.resource.data);
        allow delete: if request.auth != null && isCommissioner(getPoolData());
      }
    }

    // Users collection
    match /users/{userId} {
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
    }

    // Example playerPools collection
    match /playerPools/{docId} {
      allow read, create, update, delete: if request.auth != null && isOwner(docId);
    }

    // HELPER FUNCTIONS
    function isCommissioner(poolData) {
      return 'commissionerId' in poolData
             && poolData.commissionerId == request.auth.uid;
    }

    function isMemberOrCommissioner(poolData) {
      return ('commissionerId' in poolData && poolData.commissionerId == request.auth.uid)
             || ('memberIds' in poolData && request.auth.uid in poolData.memberIds);
    }

    function canJoinPool(poolData) {
      return 'status' in poolData && poolData.status == 'open'
             && (!('memberIds' in poolData) || !(request.auth.uid in poolData.memberIds));
    }

    function isOwner(docId) {
      let doc = get(/databases/$(database)/documents/playerPools/$(docId)).data;
      return 'userId' in doc && doc.userId == request.auth.uid;
    }

    // Validate new pool data 
    function isValidPoolData(data) {
      return data.poolName is string
             && data.poolName.size() <= 100
             && data.format in ['pickem', 'squares', 'strip_cards', 'survivor', 'custom_pool']
             && data.sport is string
             && data.sport.size() <= 50
             && data.status in ['open', 'locked']
             && data.createdAt is timestamp  // Must be a Firestore timestamp
             && ('isFeatured' in data ? data.isFeatured is bool : true) // isFeatured is optional
             && ('memberIds' in data ? (data.memberIds is list && data.memberIds.size() <= 500 && validateMemberIds(data.memberIds)) : true); // memberIds is optional
    }

    // Validate up to the first 10 memberIds are typical 28-length user IDs
    function validateMemberIds(memberIds) {
      return memberIds.size() == 0 || (
        (memberIds.size() < 1 || (memberIds[0] is string && memberIds[0].size() == 28)) &&
        (memberIds.size() < 2 || (memberIds[1] is string && memberIds[1].size() == 28)) &&
        (memberIds.size() < 3 || (memberIds[2] is string && memberIds[2].size() == 28)) &&
        (memberIds.size() < 4 || (memberIds[3] is string && memberIds[3].size() == 28)) &&
        (memberIds.size() < 5 || (memberIds[4] is string && memberIds[4].size() == 28)) &&
        (memberIds.size() < 6 || (memberIds[5] is string && memberIds[5].size() == 28)) &&
        (memberIds.size() < 7 || (memberIds[6] is string && memberIds[6].size() == 28)) &&
        (memberIds.size() < 8 || (memberIds[7] is string && memberIds[7].size() == 28)) &&
        (memberIds.size() < 9 || (memberIds[8] is string && memberIds[8].size() == 28)) &&
        (memberIds.size() < 10 || (memberIds[9] is string && memberIds[9].size() == 28))
      );
    }

    function isValidMatchupData(data) {
      return data.keys().hasAll(['gameId','homeTeam','awayTeam','startTime','status'])
             && data.gameId is string && data.gameId.size() <= 50
             && data.homeTeam is string && data.homeTeam.size() <= 100
             && data.awayTeam is string && data.awayTeam.size() <= 100
             && data.startTime is string && data.startTime.size() <= 50
             && data.status in ['pending','completed'];
    }

    function isValidSquareData(data) {
      return data.keys().hasAll(['row', 'col', 'userId'])
             && data.row is int && data.row >= 0 && data.row <= 9
             && data.col is int && data.col >= 0 && data.col <= 9
             && data.userId is string && data.userId.size() == 28;
    }
  }
}