rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Public stats collection (e.g., for community stats)
    match /stats/{docId} {
      allow read: if true; // Allow public reads
      allow write: if request.auth != null && request.auth.uid == "admin"; // Restrict writes to admin (optional)
    }

    // Pools collection
    match /pools/{poolId} {
      // Allow public reads for featured pools, authenticated reads for members/commissioners
      allow read: if (resource.data.isFeatured == true) || 
                    (request.auth != null && isMemberOrCommissioner(resource.data));

      allow create: if request.auth != null &&
                       request.resource.data.commissionerId == request.auth.uid &&
                       request.resource.data.memberIds is list &&
                       request.auth.uid in request.resource.data.memberIds &&
                       request.resource.data.keys().hasAll(['poolName', 'format', 'sport', 'status', 'createdAt']) &&
                       isValidPoolData(request.resource.data);

      allow update: if request.auth != null &&
                       (isCommissioner(resource.data) || canJoinPool(resource.data)) &&
                       request.resource.data.keys().hasAll(['poolName', 'format', 'sport', 'status', 'commissionerId', 'memberIds']) &&
                       isValidPoolData(request.resource.data);

      allow delete: if request.auth != null && isCommissioner(resource.data);

      match /matchups/{matchupId} {
        allow read: if request.auth != null && isMemberOrCommissioner(get(/databases/$(database)/documents/pools/$(poolId)).data);
        allow create, update: if request.auth != null &&
                                isCommissioner(get(/databases/$(database)/documents/pools/$(poolId)).data) &&
                                isValidMatchupData(request.resource.data);
        allow delete: if request.auth != null && isCommissioner(get(/databases/$(database)/documents/pools/$(poolId)).data);
      }

      match /{document=**} {
        allow read: if request.auth != null && isMemberOrCommissioner(get(/databases/$(database)/documents/pools/$(poolId)).data);
        allow create, update: if request.auth != null && isCommissioner(get(/databases/$(database)/documents/pools/$(poolId)).data);
        allow delete: if request.auth != null && isCommissioner(get(/databases/$(database)/documents/pools/$(poolId)).data);
      }
    }

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    match /playerPools/{docId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && isOwner(docId);
      allow delete: if request.auth != null && isOwner(docId);
    }

    function isCommissioner(poolData) {
      return 'commissionerId' in poolData && poolData.commissionerId == request.auth.uid;
    }

    function isMemberOrCommissioner(poolData) {
      return ('commissionerId' in poolData && poolData.commissionerId == request.auth.uid) ||
             ('memberIds' in poolData && poolData.memberIds.hasAny([request.auth.uid])) ||
             exists(/databases/$(database)/documents/pools/$(poolId)/participants/$(request.auth.uid));
    }

    function canJoinPool(poolData) {
      return 'status' in poolData && poolData.status == 'open' &&
             !('memberIds' in poolData && poolData.memberIds.hasAny([request.auth.uid]));
    }

    function isOwner(docId) {
      let doc = get(/databases/$(database)/documents/playerPools/$(docId)).data;
      return 'userId' in doc && doc.userId == request.auth.uid;
    }

    function isValidPoolData(data) {
      return data.poolName is string && data.poolName.size() <= 100 &&
             data.format in ['pickem', 'squares', 'strip_cards', 'survivor', 'custom_pool'] &&
             data.sport is string && data.sport.size() <= 50 &&
             data.status in ['open', 'locked'] &&
             data.createdAt is timestamp;
    }

    function isValidMatchupData(data) {
      return data.keys().hasAll(['gameId', 'homeTeam', 'awayTeam', 'startTime', 'status']) &&
             data.gameId is string && data.gameId.size() <= 50 &&
             data.homeTeam is string && data.homeTeam.size() <= 100 &&
             data.awayTeam is string && data.awayTeam.size() <= 100 &&
             data.startTime is string && data.startTime.size() <= 50 &&
             data.status in ['pending', 'completed'];
    }
  }
}